// Code generated by go-bindata.
// sources:
// faucet.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x6d\x6f\xe3\x36\x12\xfe\xec\xfc\x8a\x59\xdd\xb5\xb1\x91\x48\x4a\x36\x8b\x6d\xe1\x48\x2e\x16\xed\xde\xb6\x87\x43\x5b\x5c\xb7\xb8\x2b\xda\xe2\x40\x49\x23\x8b\x1b\x8a\x54\xc9\xa1\x1d\x37\xf0\x7f\x3f\x90\x94\x65\xd9\x49\x2e\x69\x6f\xbf\x64\x4d\x72\xf8\xcc\x33\x1c\x72\x5e\xb4\xd9\x8b\xaf\xbe\xfb\xf2\xfd\x4f\xdf\xbf\x85\x86\x5a\xb1\x38\xc9\xdc\x3f\x20\x98\x5c\xe6\x11\xca\x68\x71\x02\x90\x35\xc8\x2a\xf7\x03\x20\x6b\x91\x18\x94\x0d\xd3\x06\x29\x8f\x2c\xd5\xf1\xe7\xd1\x78\xa9\x21\xea\x62\xfc\xcd\xf2\x55\x1e\xfd\x3b\xfe\xf1\x4d\xfc\xa5\x6a\x3b\x46\xbc\x10\x18\x41\xa9\x24\xa1\xa4\x3c\xfa\xe6\x6d\x8e\xd5\x12\x0f\x76\x4a\xd6\x62\x1e\xad\x38\xae\x3b\xa5\x69\x24\xbc\xe6\x15\x35\x79\x85\x2b\x5e\x62\xec\x07\xe7\xc0\x25\x27\xce\x44\x6c\x4a\x26\x30\xbf\x8c\x16\x27\x01\x89\x38\x09\x5c\xdc\xdd\x25\xdf\x22\xad\x95\xbe\xd9\x6e\xe7\xf0\x8e\xd3\xd7\xb6\x80\xbf\x31\x5b\x22\x65\x69\x10\x39\x39\x99\x4c\x32\xc1\xe5\x0d\x34\x1a\xeb\x3c\x72\xbc\xcd\x3c\x4d\xcb\x4a\x7e\x30\x49\x29\x94\xad\x6a\xc1\x34\x26\xa5\x6a\x53\xf6\x81\xdd\xa6\x82\x17\x26\xa5\x35\x27\x42\x1d\x17\x4a\x91\x21\xcd\xba\xf4\x2a\xb9\x4a\x3e\x4b\x4b\x63\xd2\x61\x2e\x69\xb9\x4c\x4a\x63\x22\xd0\x28\xf2\xc8\xd0\x46\xa0\x69\x10\x29\x82\xb4\xb7\xf8\x8f\x6b\xae\x95\xa4\x98\xad\xd1\xa8\x16\xd3\x57\xc9\x67\xc9\x85\x57\x3a\x9e\xfe\xdf\x7a\x9d\xc1\xa6\xd4\xbc\x23\x30\xba\x7c\xb6\xde\x0f\xbf\x59\xd4\x9b\xf4\x2a\xb9\x4c\x2e\xfb\x81\xd7\xf3\xc1\x44\x8b\x2c\x0d\x80\xbd\x51\x7f\x1a\x3d\x96\x8a\x36\xe9\xcb\xe4\x55\x72\x99\x76\xac\xbc\x61\x4b\xac\x76\xba\xdc\x52\xb2\x9b\xfc\x88\x9a\x1f\xf3\xe4\x87\x63\x47\x1e\xaa\xfb\x73\x87\xd8\xaa\x16\x25\x25\x1f\x4c\xfa\x32\xb9\xfc\x3c\xb9\xd8\x4d\xdc\xc7\xef\xed\x71\xae\x0b\xb6\x01\x24\x2b\xd4\xc4\x4b\x26\xe2\x12\x25\xa1\x86\xbb\x7e\x01\xa0\xe5\x32\x6e\x90\x2f\x1b\x9a\xc3\xe5\xc5\xc5\x27\xd7\x8f\xad\xac\x9a\xfd\x52\xc5\x4d\x27\xd8\x66\x0e\xb5\xc0\xdb\xfd\x34\x13\x7c\x29\x63\x4e\xd8\x9a\x39\x04\x4d\xbb\xc5\xed\x8e\x49\xa7\xd5\x52\xa3\x31\x23\x0a\x9d\x32\x9c\xb8\x92\x73\x77\xe9\x18\xf1\x15\x3e\xbe\xcb\x74\x4c\x3e\xb8\x95\x15\x46\x09\x4b\xf8\x00\xc9\x42\xa8\xf2\x66\x3f\xef\xdf\xff\xb1\xb1\xa5\x12\x4a\xcf\x61\xdd\xf0\x11\xc4\xf6\x64\x32\x99\x40\xa7\x11\xee\xdc\xaf\x09\x74\xac\xaa\xb8\x5c\xce\xe1\x75\x77\x7b\x1d\xa6\x5a\xa6\x97\x5c\xce\xe1\xc2\x8f\x7b\xc6\x59\x3a\x1c\x7f\x96\x86\xd0\xe7\x7e\x16\xaa\xda\xf4\xd7\xad\xe2\x2b\x28\x05\x33\x26\x8f\x8e\x7c\x13\xed\x9c\x36\x96\x71\x91\x8c\x71\xd9\xaf\x4e\x26\x93\xf1\xa2\x56\xeb\x08\xbc\xc2\x3c\x0a\x74\xe2\x42\x11\xa9\x76\x0e\x97\x8e\xe8\x80\x78\x1f\x55\xc4\x62\x19\x5f\xbe\x3c\x90\x70\xd1\xfa\x72\x87\x47\x78\x4b\xb1\xf7\xeb\xe0\xd1\x68\x91\xf1\x1d\x42\xcd\xa0\x66\x71\xc1\xa8\x89\x80\x69\xce\xe2\x86\x57\x15\xca\x3c\x22\x6d\xd1\x5d\x4a\xbe\x80\x71\x28\xdd\x45\xd2\x37\x96\x1a\x94\xce\x6c\xc2\xaa\x8f\xab\x70\x0c\xbb\xe4\xd4\xd8\x22\x66\x82\x1e\x05\xcf\xd2\xe6\xf2\xc0\xba\xb4\xe2\xab\xfd\xc4\x30\x7c\xe0\xc4\x16\xde\x7f\x93\x07\xce\xe3\x73\xe8\x7f\xa8\xba\x36\x48\xf1\xcb\x9d\xec\x81\x30\x97\x9d\xa5\x78\xa9\x95\xed\x86\xf5\x49\xe6\x67\x81\x57\x79\xb4\xe4\x86\x22\xa0\x4d\xd7\x9f\x62\x34\x18\xa7\x74\x1b\x3b\x87\x6a\x25\x22\xe8\x04\x2b\xb1\x51\xa2\x42\x9d\x47\xfd\xe9\xbc\xe3\x86\xe0\xc7\x7f\xfe\x03\x7a\xb7\x73\xb9\x84\x8d\xb2\x1a\xde\x52\x83\x1a\x6d\x0b\xac\xaa\xdc\x73\x48\x92\x64\xa4\xdb\xbf\x8d\xfb\xec\xe2\x82\xe4\x5e\x6a\x92\x15\x96\x48\x0d\x82\x05\x49\x28\x48\xc6\x15\xd6\xcc\x8a\x81\x71\x10\x8a\x40\xc9\x52\xf0\xf2\x26\x8f\x8c\x2d\x5a\x4e\xd3\x59\xb4\x78\xc7\x57\x08\x2d\x06\x32\x2f\xb2\x34\x88\xee\x69\xa4\x8e\xc7\x70\x62\xc1\x03\xe3\xdf\xc1\x1b\xfb\xf9\x27\xae\x32\xa9\x6e\x0e\x57\x2f\xc3\x3d\xbe\xef\x86\xde\x55\xaf\x8f\x7c\x76\xf5\xa0\x70\xc7\x24\x0a\xf0\x7f\x63\xd3\x32\xb1\xfb\xbd\x33\xfe\xf0\x19\x1c\x3e\x96\x20\xe9\x9e\xf0\xc0\x70\x08\x07\x17\xd7\xa0\x56\xa8\x6b\xa1\xd6\x73\x60\x96\xd4\x35\xb4\xec\x76\x88\x9e\x57\x17\x17\xbb\x67\xb8\x3b\x24\x62\x85\x40\x7f\x4f\x34\xfe\x66\xd1\x90\x19\xee\x47\x58\xf2\x7f\xdd\x35\xa9\x50\x1a\xac\x8e\x4e\xc5\xa9\x74\x2f\xc0\x4b\xdd\x63\x7d\xf8\x08\x1e\x33\xa5\x56\x6a\x1c\x6e\x46\xa2\x81\x41\xaf\x70\x14\x2e\xa3\x45\x46\xfa\xbe\xbc\xdb\x51\xfd\xa1\x80\xa1\x5d\x85\xf1\x58\xbc\x08\xf7\xd8\x1d\x4d\x87\xa8\x43\x6a\x73\x37\x0a\xfc\x30\x4b\xa9\xfa\x18\x14\x2a\x46\xac\x60\x06\x9f\xc3\xc3\x27\x90\x3d\x0f\x3f\xfc\x68\x44\x1a\x64\x9a\x0a\x64\x8f\x07\xb9\x11\x93\xda\xca\x6a\x74\x22\xfe\x09\x7e\x34\x26\x56\xf2\x15\x6a\xc3\x69\xf3\x5c\x2a\x58\xed\xb9\x84\xf1\xc3\x5c\xb2\x94\xf4\x13\xb7\xf5\xd1\x70\x71\x10\x39\xee\xdf\xe5\xa7\x22\xc6\xc3\x2f\xe0\xf1\xcc\x77\xb5\xf8\x5a\xad\xa1\x52\x68\x80\x1a\x6e\xc0\xe5\xad\x2f\xb2\xb4\xb9\x3a\x12\xec\x16\xef\xdd\xb2\xf7\x00\xd4\x21\x81\x71\x03\xda\x4a\x1f\xae\x95\x04\x6a\xf0\x30\xf7\xc9\xf0\x2b\x81\xf7\xca\x15\x15\x2b\x94\x04\x2d\x13\xbc\xe4\xca\x1a\x60\x25\x29\x6d\xa0\xd6\xaa\x05\xbc\x6d\x98\x35\xe4\x80\x5c\x90\x62\x2b\xc6\x85\x7f\x93\xde\xff\xa0\x34\xb0\xb2\xb4\xad\x75\xd5\x92\x5c\x02\x4a\x65\x97\x4d\xcf\x85\x14\xb4\xca\x4a\x02\xa1\xe4\x72\xe0\x63\x3a\xd6\x02\x23\x62\xe5\x8d\x39\x87\x5d\xcc\x01\xa6\x11\x88\x63\xe5\x76\xf5\xc9\x87\x95\xa5\xdb\x6e\x12\x78\x23\x37\x4a\x22\x34\x6c\xe5\x89\x1c\x09\x40\xcb\x36\x3b\xa0\x9e\xd7\x9a\x53\xc3\x83\xe1\x1d\xea\xd6\x55\xc7\x15\x08\xde\x72\x02\x55\xbb\x92\x54\x2b\xb9\x74\xad\xd5\x1b\xcf\x70\xbb\x0d\x94\xa7\x66\x06\xa9\x3b\xaa\xef\x51\x73\x55\x6d\xb7\xae\x7c\xf2\xa2\x49\x96\x76\xf7\xcf\x5d\x1d\xaa\x3d\x07\xc3\xdb\x4e\x6c\xa0\xd4\xc8\x08\x81\x41\xc6\x8e\x1a\x23\x97\x8b\x93\x50\x4e\xf8\xb2\x3a\x02\x62\x7a\xe9\xda\xcf\xff\xb0\x42\x59\x9a\x17\x82\xc9\x1b\x97\xda\x86\xfc\x9b\xa5\x6c\xe1\x0d\x7a\x38\xf3\x42\xc7\x8c\xb3\x8e\x4b\x52\xde\xe0\xbe\xd7\x34\x30\x75\xa3\x9a\x0b\xf4\xed\xa8\xbf\x49\xf2\xd4\x9d\x96\xeb\x15\x66\xe7\x50\xaa\x6e\x13\x76\xfb\x7d\x8e\x9a\xf1\xc9\x7e\x80\x62\x85\x5a\x21\x84\x4a\xa2\x50\xb7\xc0\x64\x05\x35\xd7\x08\x6c\xcd\x36\x2f\xe0\x27\x65\xa1\x64\x12\x48\xb3\xf2\x26\xe8\xb6\x5a\xbb\xcb\xd4\xa1\x74\xf9\x68\xef\xde\x02\x85\x5a\x7b\x91\x80\x56\x73\x14\xde\xd7\x06\x11\x1a\xb5\x86\xd6\x96\xde\x40\xe7\x64\x74\x0b\x6b\xc6\x09\xac\x24\x2e\x82\xdd\x64\xb5\x84\x52\xb5\x68\x8e\x7d\xf1\x58\xa9\x75\x34\xe8\x7f\x8e\x9b\xac\x9d\x54\x9a\xc2\x3b\xa1\x0a\x26\x60\xe5\xc2\x4d\x21\xdc\x9b\x53\xe0\x8a\xa1\x03\xb3\x0c\x31\xb2\xc6\x5d\x21\x7f\xb4\xfe\xad\xf5\x10\x2b\xa6\xdd\xad\xc6\xb6\x23\xc8\xfb\x1a\xdc\xcd\x19\xd4\x2b\xd7\x7c\xec\x35\x7d\x85\x35\x97\xe1\xc8\x6b\x2b\x4b\xd7\x34\x00\x35\x8c\x20\x14\x36\x06\x98\x77\x05\x58\x2d\xa0\xf7\x43\x00\x19\x69\x0a\xa2\x90\x0f\x08\xd3\xd9\xa8\x17\x09\xe2\x89\x41\x59\x4d\xff\xfe\xc3\x77\xdf\x26\x86\x34\x97\x4b\x5e\x6f\xa6\x77\x56\x8b\x39\xfc\x75\x1a\xfd\xc5\x57\x85\xb3\x9f\x2f\x7e\x4d\x56\x4c\x58\xdc\xce\x66\x43\xaf\x73\x7d\x8f\x2c\x83\x16\xa9\x51\xde\x63\x1a\x4b\x25\x25\x96\x04\xb6\x53\xb2\x57\x06\x42\x19\xb3\xb3\x79\x2f\xf1\x08\x41\x5e\xc3\x74\x77\x58\x9f\xc0\x4b\xc8\x73\xb8\x18\xaf\xef\x4c\x80\x1c\x24\xae\xe1\x5f\x58\xfc\xa0\xca\x1b\xa4\x69\xb4\x36\xee\x15\x45\x70\x06\x42\x95\xcc\x01\x27\x8d\x32\x04\x67\x10\xa5\xac\xe3\xd1\x6c\xdf\x48\x6d\x01\x85\xc1\x67\xa2\x3e\x1b\x74\xdf\x62\x06\xfe\x67\x67\x83\x6f\x87\x83\x57\xb2\x45\x63\xd8\x12\xc7\xf6\xfb\x28\x7b\x68\xa4\x3b\xab\xd6\x2c\x21\x07\xef\xa5\x8e\x69\x83\x41\x2e\x71\x45\xc1\x48\x6d\x38\x32\x2f\x9b\xe7\x20\xad\x10\x87\x48\x00\x1a\xdd\x03\x19\xef\xd8\x9e\xdc\xdf\x9e\x84\xf0\xf8\x22\xcf\xc1\x25\x49\xe7\xdb\xea\x18\xc9\x5d\x8e\x90\xdd\x67\x89\xcb\xd6\xfb\x7d\xb3\x43\xf8\x87\xd1\xb1\x7a\x1e\x3c\x56\xc7\xf8\x58\x3d\xa9\xc0\x17\x5e\x4f\xe3\x87\x72\x6d\x04\xef\x27\x9e\x44\x97\xb6\x2d\x50\x3f\x0d\x1f\xaa\xb0\x1e\xde\x7b\xed\x1b\x49\x23\x84\x73\xb8\x7c\x3d\x7b\x52\x1b\x6a\xad\x9e\x50\x26\x15\x6d\xa6\x77\x82\x6d\x5c\x66\x80\x53\x52\xdd\x97\xbe\x64\x3a\x3d\x07\xa7\x7b\x0e\x03\xce\xb9\xef\x96\xe6\x70\xea\x47\xa7\xdb\x27\xb5\x1b\x5b\x96\x2e\x7b\xfc\xff\xfa\x7b\xa4\x81\x41\x3f\x7e\x06\x87\x21\x3b\x1c\x90\x80\x4f\x3f\x85\x7b\xab\x0f\x5d\x79\xf7\x7c\xfa\x64\x07\x39\x44\xd1\xf5\xc1\x6a\xad\x34\x4c\x9d\x08\xcf\x2f\xae\x81\x67\x63\xc8\x44\xa0\x5c\x52\x73\x0d\xfc\xec\xec\x18\x15\x06\xcc\xb3\x1c\x22\xd7\x66\x64\x54\x2d\x7c\xc9\x16\x8a\xbb\x5f\xa2\x82\x95\x37\xae\xa1\x95\xd5\xdc\x45\xe9\xe9\xe9\x3e\xbb\x8f\x12\xfb\xd9\x81\x15\x3f\xf3\x5f\x13\x6b\x50\xfb\x54\x7c\x06\x51\xd2\xc9\xe5\x17\x86\xff\x8e\xf9\xeb\x57\xa7\xb3\x6b\xd8\x63\xc6\x6e\x76\x0e\xa5\xeb\xe3\xae\xfb\x6f\x44\xbe\x86\x84\xa1\x8b\xf3\xa3\x42\xe9\x0a\x75\xac\x59\xc5\xad\x99\xc3\xab\xee\xf6\xfa\x17\x57\x04\xbb\x2c\xe7\x8b\x5f\xcf\xbb\xd3\xb8\x78\x88\xcb\xae\x76\x3a\x83\x28\x4b\x9d\xd0\x6e\xcb\x60\xe5\xf8\xeb\x14\x3c\x50\xb6\xc3\xf0\xb9\xa8\x9f\x6f\x79\x55\x09\x74\x24\xbc\xc2\xf0\x55\xb0\xb2\xda\x47\xd4\x69\x18\x4f\x8f\x79\x10\x6f\x71\x96\x58\xc9\x6f\xa7\xb3\xb8\x97\xd9\x8d\xcf\xe1\xd4\xb8\x54\x52\x99\xd3\x59\xd2\xd8\x96\x49\xfe\x3b\x4e\x5d\x0f\x30\x0b\xbc\x1d\x63\x57\xd0\x1f\xb9\x7e\x7b\xef\xc5\x0e\xad\xed\x2c\x69\xa8\x15\xd3\x28\x23\xff\x09\xcc\x11\x1d\xdc\xed\x11\xc3\xf4\x23\x57\xd7\x7f\x86\x9b\x0c\x51\xbe\x14\xca\xe0\x51\x8e\x03\x83\xf4\x9e\xb7\xa8\x2c\x4d\x87\x3c\x78\xee\x1a\xef\x8b\xd9\xf5\x3e\xb5\x8e\x72\x45\x88\x03\x7f\x0a\x65\xbb\x4f\xd4\x6f\x8d\xeb\x69\xb8\x69\x80\xc1\x1a\x0b\xe3\x33\x1b\xf4\x3b\x7d\x89\x11\x4a\x89\x37\xdf\x7f\x73\x58\x4e\x0c\xf0\xd3\x99\x2b\x5a\xc6\x1f\xa3\xb3\x34\x7c\x27\xcc\xd2\xf0\xdf\x29\xff\x0d\x00\x00\xff\xff\xe0\xb5\x70\x41\x5f\x19\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": &bintree{faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

