// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*returnDataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r ReturnData) MarshalJSON() ([]byte, error) {
	type ReturnData struct {
		TxHash  common.Hash   `json:"transactionHash" gencodec:"required"`
		Data    hexutil.Bytes `json:"returndata" gencodec:"required"`
		Removed bool          `json:"removed"`
	}
	var enc ReturnData
	enc.TxHash = r.TxHash
	enc.Data = r.Data
	enc.Removed = r.Removed
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *ReturnData) UnmarshalJSON(input []byte) error {
	type ReturnData struct {
		TxHash  *common.Hash   `json:"transactionHash" gencodec:"required"`
		Data    *hexutil.Bytes `json:"returndata" gencodec:"required"`
		Removed *bool          `json:"removed"`
	}
	var dec ReturnData
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionHash' for ReturnData")
	}
	r.TxHash = *dec.TxHash
	if dec.Data == nil {
		return errors.New("missing required field 'returndata' for ReturnData")
	}
	r.Data = *dec.Data
	if dec.Removed != nil {
		r.Removed = *dec.Removed
	}
	return nil
}
