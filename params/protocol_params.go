// DO NOT EDIT!!!
// AUTOGENERATED FROM generators/defaults.go

package params

import "math/big"

var (
	JumpdestGas            = big.NewInt(1)      // Refunded gas, once per SSTORE operation if the zeroness changes to zero.
	TxGas                  = big.NewInt(21000)  // Per transaction. NOTE: Not payable on data of calls between transactions.
	DurationLimit          = big.NewInt(13)     // The decision boundary on the blocktime duration used to determine whether difficulty should go up or not.
	StackLimit             = big.NewInt(1024)   // Maximum size of VM stack allowed.
	CallCreateDepth        = big.NewInt(1024)   // Maximum depth of call/create stack.
	ExpByteGas             = big.NewInt(10)     // Times ceil(log256(exponent)) for the EXP instruction.
	CreateDataGas          = big.NewInt(200)    //
	Sha256WordGas          = big.NewInt(12)     //
	MinGasLimit            = big.NewInt(5000)   // Minimum the gas limit may ever be.
	Sha3Gas                = big.NewInt(30)     // Once per SHA3 operation.
	Sha3WordGas            = big.NewInt(6)      // Once per word of the SHA3 operation's data.
	LogGas                 = big.NewInt(375)    // Per LOG* operation.
	ExpGas                 = big.NewInt(10)     // Once per EXP instuction.
	CallStipend            = big.NewInt(2300)   // Free gas given at beginning of call.
	IdentityWordGas        = big.NewInt(3)      //
	TxDataZeroGas          = big.NewInt(4)      // Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions.
	TxDataNonZeroGas       = big.NewInt(68)     // Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions.
	DifficultyBoundDivisor = big.NewInt(2048)   // The bound divisor of the difficulty, used in the update calculations.
	LogTopicGas            = big.NewInt(375)    // Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas.
	CreateGas              = big.NewInt(32000)  // Once per CREATE operation & contract-creation transaction.
	CallGas                = big.NewInt(40)     // Once per CALL operation & message call transaction.
	SloadGas               = big.NewInt(50)     // Once per SLOAD operation.
	SstoreSetGas           = big.NewInt(20000)  // Once per SSTORE operation if the zeroness changes from zero.
	CallValueTransferGas   = big.NewInt(9000)   // Paid for CALL when the value transfor is non-zero.
	SuicideRefundGas       = big.NewInt(24000)  // Refunded following a suicide operation.
	GenesisGasLimit        = big.NewInt(5000)   // Gas limit of the Genesis block.
	GasLimitBoundDivisor   = big.NewInt(1024)   // The bound divisor of the gas limit, used in update calculations.
	GenesisDifficulty      = big.NewInt(131072) // Difficulty of the Genesis block.
	MaximumExtraDataSize   = big.NewInt(1024)   // Maximum size extra data may be after Genesis.
	MemoryGas              = big.NewInt(3)      // Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL.
	CopyGas                = big.NewInt(3)      // Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added.
	Ripemd160WordGas       = big.NewInt(120)    //
	Sha256Gas              = big.NewInt(60)     //
	EpochDuration          = big.NewInt(30000)  // Duration between proof-of-work epochs.
	TierStepGas            = big.NewInt(0)      // Once per operation, for a selection of them.
	LogDataGas             = big.NewInt(8)      // Per byte in a LOG* operation's data.
	CallNewAccountGas      = big.NewInt(25000)  // Paid for CALL when the destination address didn't exist prior.
	SstoreResetGas         = big.NewInt(5000)   // Once per SSTORE operation if the zeroness does not change from zero.
	EcrecoverGas           = big.NewInt(3000)   //
	IdentityGas            = big.NewInt(15)     //
	MinimumDifficulty      = big.NewInt(131072) // The minimum that the difficulty may ever be.
	SstoreRefundGas        = big.NewInt(15000)  // Once per SSTORE operation if the zeroness changes to zero.
	QuadCoeffDiv           = big.NewInt(512)    // Divisor for the quadratic particle of the memory cost equation.
	Ripemd160Gas           = big.NewInt(600)    //
)
