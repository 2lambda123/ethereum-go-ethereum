// Code generated by go-bindata.
// sources:
// assets/dashboard.html
// assets/js/bundle.js
// DO NOT EDIT!

package dashboard

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dashboardHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x51\x6f\xd3\x30\x10\xc7\xdf\x27\xed\x3b\x18\x3f\x13\xbb\x5d\x27\x6d\x8c\xb8\x02\x6d\x03\xf1\x04\x0f\x9b\x04\x8f\x8e\x7d\x49\x9c\x39\x76\x66\x5f\x52\x2a\xc4\x77\x47\xc9\x52\x48\xe9\xca\x18\x2a\x79\x49\xee\xce\xf7\xff\xf9\x7c\xf2\x25\x7d\x71\xf5\xf1\xf2\xe6\xcb\xa7\x6b\x52\x62\x6d\x97\xc7\x47\x69\xff\x26\x56\xba\x42\x50\x70\x74\x79\x7c\x44\x08\x21\x69\x09\x52\x8f\xdf\x83\x5d\x03\x4a\xa2\x4a\x19\x22\xa0\xa0\xb7\x37\xef\x92\x73\xba\x13\x2f\x11\x9b\x04\xee\x5b\xd3\x09\xfa\x39\xb9\x7d\x9b\x5c\xfa\xba\x91\x68\x32\x0b\x94\x28\xef\x10\x1c\x0a\xfa\xe1\x5a\x80\x2e\x60\x37\xdd\xc9\x1a\x04\xed\x0c\xac\x1a\x1f\x70\x92\xb1\x32\x1a\x4b\xa1\xa1\x33\x0a\x92\xc1\x78\x49\x8c\x33\x68\xa4\x4d\xa2\x92\x16\xc4\xbc\x57\x9b\xe8\xa1\x41\x0b\xcb\xf7\x9e\x5c\x63\x09\x01\xda\x9a\x5c\xc9\x58\x66\x5e\x06\x9d\xf2\x87\xe0\x64\xb5\x35\xee\x8e\x04\xb0\x82\xc6\xd2\x07\x54\x2d\x12\xa3\xbc\xa3\x04\xd7\x0d\x08\x6a\x6a\x59\x00\x37\xca\x53\x52\x06\xc8\x05\xed\xeb\x8c\x17\x9c\xc3\x28\xce\x7c\x28\x78\x2e\xbb\x3e\x89\xf5\xeb\xf8\xf6\x6e\x06\xfd\xed\x54\xa5\x5d\x15\x99\xb2\xbe\xd5\xb9\x95\x01\x98\xf2\x35\x97\x95\xfc\xca\xad\xc9\x22\xc7\x95\x41\x84\x90\x64\xde\x63\xc4\x20\x1b\xbe\x60\x0b\x76\xc6\x55\x8c\xfc\xa7\x8f\xd5\xc6\x31\x15\x23\x1d\xf7\x8e\x6b\x0b\xb1\x04\x40\x4a\xf8\x4e\x79\xcf\xc2\xe7\xde\x61\x22\x57\x10\x7d\x0d\xfc\x94\x9d\xb1\xd9\x40\x9e\xba\xff\x1f\xbc\x00\x87\x60\xc1\x5a\xc9\xe7\x6c\x31\xa2\x55\x1b\xd1\xd7\xfb\xa1\xdb\x07\x1e\x55\x30\x0d\x92\x18\xd4\x5f\x53\xab\xfb\x16\xc2\x9a\x9f\xb0\x39\x3b\x1d\x8d\x81\x56\x45\xba\x4c\xf9\x83\xe0\xf2\x10\x88\xc4\x79\xec\x39\xa7\x6c\xce\x1b\xa9\xee\x64\x01\x7a\x03\xec\x43\x6c\xe3\x3c\x34\xfe\xb2\x94\x01\x59\x15\xf9\x09\x9b\xb1\xd9\x68\x3e\xcd\x98\x78\xfa\xe7\x21\x4d\x43\x2e\x5b\x8b\x91\x15\xd6\x67\xd2\x32\x0b\x05\x38\x4d\x04\xf9\x46\xc0\xc9\xcc\x82\xbe\x20\xb9\xb4\x11\xc8\xf7\xd7\x13\xc5\xc3\x14\xb2\xef\x72\x54\xbf\xdf\x8d\x03\x1e\x5e\x6e\x3d\xf2\x19\x3b\x67\x8b\x4d\xaf\x7a\xcf\x3e\x4a\xca\x27\xf3\x33\xcd\xbc\x5e\x3f\x85\x6f\x5d\x73\x57\x0c\x4c\xe3\x72\x08\xce\xbf\x59\xb0\x57\x6c\xc6\xb5\x89\xb8\x71\x3d\xbb\xa6\x1d\xd1\x44\xf9\xba\xf1\x0e\x1c\x3e\x22\xff\x2b\xf8\x18\x68\x82\xd2\xa6\x23\x46\x0b\xaa\x37\x23\x95\x12\x65\x65\x8c\x82\x3a\xd9\x25\xb5\xee\xf3\xb4\xe9\xf6\xed\xae\x6f\x53\xeb\xb4\x85\x3f\x20\xfe\xa1\x43\x3b\x63\xa3\xda\x9a\x1a\x8f\x76\x69\xec\x4c\xca\x87\x9f\xe1\x8f\x00\x00\x00\xff\xff\x5c\x2e\xb8\x55\x1c\x07\x00\x00")

func dashboardHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dashboardHtml,
		"dashboard.html",
	)
}

func dashboardHtml() (*asset, error) {
	bytes, err := dashboardHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dashboard.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsBundleJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x6b\x8f\xdb\x36\xf2\xaf\x68\x59\xc0\x27\x62\x69\xc5\xf6\x66\x93\x40\xae\x1a\xb4\x69\x71\xed\xe1\x9a\x14\xb7\xc1\xf5\x83\x61\x18\x94\x34\xb2\x79\xa1\x49\x81\xa4\xf6\x01\xaf\xfe\xfb\x81\xd4\xc3\xf2\x5a\x7e\xec\x06\xc5\xe1\x80\x04\xc8\x2e\x45\xce\x0c\x87\x33\xc3\x79\x71\x2f\xb2\x42\x24\x86\x49\xe1\x03\xde\x34\x63\xcf\xf8\x02\x6f\x58\xe6\xab\x99\x98\x63\x05\xa6\x50\xc2\xb3\xe3\x00\xee\x73\xa9\x8c\x9e\xde\x52\xe5\xc9\xc8\x4e\x45\x1b\x16\x0a\xc2\xc3\x8b\x31\xa9\x17\xc3\x4d\x59\x4e\x6b\x24\xb0\x48\x09\xe5\xdc\x97\x0d\x2e\x91\x64\x3b\x36\x98\xc8\x80\x47\x17\xa3\xed\x5c\x69\x69\xab\x68\x53\x4e\x4d\xb0\x8e\x80\x98\x20\x89\x14\x31\x41\x1a\x6d\x59\x25\x8a\x08\xbc\x31\x81\xb4\x43\xfc\xf8\xf8\x29\xfe\x0f\x24\x26\x48\x21\x63\x02\xfe\x50\x32\x07\x65\x1e\x1c\xd8\x26\x91\x22\x63\xcb\x42\xd1\x98\x83\x63\x52\x14\x6b\xa8\xbf\x46\x64\x09\x26\x14\x25\x2e\x89\x09\x44\xd4\x15\x45\xc5\x04\x0c\x06\x10\x2c\x16\xa0\x7f\x97\x69\xc1\xe1\x7d\x0b\x81\x37\xcd\x01\xed\xa6\xb4\xe0\xa6\x0c\x7b\x16\x5b\x39\x98\x20\xf5\x15\x41\x14\x11\x85\x89\xb2\xdb\xc9\xee\x71\x4c\x8b\x52\x9f\x24\x57\xd2\x48\xf3\x90\x43\xb0\xa2\xfa\xd3\x9d\x68\xce\x54\xc9\xd2\x22\x58\x1a\x79\x84\x10\x31\xbe\x09\x74\x74\x85\x4b\x7f\xb6\x4b\x11\x1a\x89\x46\xbf\x89\x0c\x94\x90\x25\xe9\x02\x10\x85\x37\xa8\xd0\xe0\x69\xa3\x58\x62\xd0\x54\x05\xa9\x6f\x08\x4a\x10\xd9\x3f\x89\x2c\x31\xa9\xd7\xd3\xbe\x75\xba\x5d\xa7\x7d\xeb\xc9\x76\x3d\xee\x5b\xe7\x25\x76\x36\x25\x22\xe5\x8f\x30\x91\x91\xaf\x02\xe1\x0b\x4c\xba\x3a\xa9\x61\x45\xc1\x79\x14\x45\xf0\xf8\x78\x2b\x59\xea\x8d\xec\xb8\xc4\x84\xf6\x0a\xf4\xe2\x47\xa5\xe8\x43\xc0\xb4\xfb\xed\x03\x7e\x7c\x84\x80\x83\x58\x9a\xd5\xf7\xe3\xc7\xc7\xb1\x45\xae\xbf\xdf\x1b\x1f\x70\x08\xc1\x9a\xe6\xbe\x95\x6f\x12\xed\xf3\x59\xa9\xc7\x17\x41\xa2\x80\x1a\xf8\xf7\x47\x99\x02\xf6\x27\x04\xa5\xec\x16\x11\x94\x70\xa0\x2a\x63\xf7\x08\x97\x84\x47\x93\xd1\x68\x57\xe4\x3d\x3a\x09\x3e\xc8\x75\x2e\x05\x08\x73\x42\x3b\xfd\x26\x6e\x08\xda\x9a\x27\x22\x9b\x5b\xca\x0b\x6b\xd8\x4f\xc5\x59\x4b\x93\x46\xca\x7f\x8d\xa7\x32\xa0\x81\x02\x91\x82\xf2\xfb\x0f\x34\x7e\x43\x68\x40\x31\x49\x65\x52\xac\x41\x98\x60\x09\xe6\x17\x0e\x76\xf8\xd3\xc3\x6f\xa9\x8f\x52\xaa\x57\xb1\xa4\x2a\x45\x18\x9f\x60\xbc\x75\x2a\xb5\x08\x58\xe6\x5f\xf8\xe0\x31\xa1\x0d\x15\x09\xc8\xcc\x33\x18\x9b\x95\x92\x77\x9e\x80\x3b\xef\xf3\x43\x0e\xbf\x28\x25\x95\x8f\x3e\x50\x21\xa4\xf1\xac\xc9\x7b\xd4\x4b\x38\xd5\xda\xa3\xda\xa3\x5e\x43\x12\xe1\xb2\xa5\x2e\xb7\xd4\xa1\x43\xee\x5f\x90\x81\x02\x91\x34\x34\xcd\x8a\x69\x6f\x45\xb5\xf8\x9b\xf1\x62\x00\xe1\x31\xc1\x0c\xa3\x9c\x69\x48\xbd\xa1\xa7\x8b\x1c\x94\x8f\x77\x20\xec\xfe\x90\x22\x5c\xdf\xe5\x0b\xf3\xf8\x88\xa4\x13\x1b\xba\x88\xec\x1d\xb5\x47\x18\x0c\x50\xcb\xd5\x76\xf6\x3d\x84\x66\xcb\x22\x6d\x59\xec\x83\x1d\x0c\xac\x61\x5f\x44\x91\xe9\x97\xc6\x8d\x65\xcd\x83\xfb\x5c\x81\xd6\x96\xdc\xba\xd0\xc6\x03\x66\x56\xa0\xbc\x18\xdc\xb5\xf0\xa4\xea\x88\x87\x78\x56\x7c\xe8\xb2\xd9\x01\x4f\x61\xeb\x58\xa2\xda\xa0\x2a\xbd\xfb\x66\x30\xe8\x78\x1d\xe7\x36\xb5\x51\x45\x62\xa4\x0a\x6b\xab\x82\x1d\xdf\x39\x26\x77\x8a\x99\xc6\x8f\xee\x7a\xd9\x51\x59\x62\x62\x06\x83\xda\xba\x02\x0d\xe6\x8f\x86\xf4\xa7\xec\x7d\xef\xac\x93\x4d\x68\xbd\xad\xe3\x62\xb1\x88\x0c\x76\xa1\x20\x89\x94\x3f\xc1\x84\x3b\x1b\x4e\x30\x61\x91\xf2\xc7\x98\x14\x91\xf2\xaf\x31\xd1\x91\xf2\xdf\x60\x92\x46\xca\x7f\x8b\x49\x16\x29\xff\x1d\x26\x71\x65\xf6\xab\xca\x8b\xc4\xbb\x5e\xa4\x13\xe4\x14\xde\x08\xdf\x5a\x04\x31\xd5\x7d\xa1\x91\xac\xbe\xa1\x72\xb4\x6e\xac\x70\xa3\x7a\x8f\x06\x45\x9e\x52\x03\x1f\x56\xd4\xde\xe1\xa7\x01\xc3\x44\x34\xd0\x86\x1a\x08\x12\x07\x10\xac\x61\x2d\xd5\x03\x51\x4f\xe7\x8d\xa2\x59\xc6\x92\x29\xcb\xfc\xca\x87\x5d\x58\x37\xb4\x06\x7b\x65\xb4\x0d\x6c\x9c\xc6\xc0\x75\x34\x9b\x13\xd5\x19\x9b\x20\xa5\x86\x6a\x30\x7a\x36\x9a\xbb\x71\x05\xd1\x33\x3b\xcd\xa4\xf2\x2b\x17\xd0\x12\x6e\xd8\x91\x9d\xa9\x5c\xc9\x04\xb4\x96\x8a\x24\x91\xa8\x1d\xe1\x70\x3c\x4d\x7e\x88\x46\x83\x01\x0b\xe2\x1f\x1a\x5e\xea\xb5\xe9\x70\x98\xe0\x76\xae\x10\x7a\xc5\x32\xe3\x8b\x59\x32\x0f\x0c\x5b\x43\xa0\x8b\xd8\x5e\x7c\xb1\xec\xcc\xd5\x54\xaf\x31\x6e\x4f\xf3\x7c\xcc\xfd\xb3\xef\xd2\x70\x36\x8a\x7b\x84\xd1\x82\xc9\x2d\x58\xa3\x4f\x27\x7c\x6a\x2d\xf1\xc6\xaa\xc7\xdf\x54\xfa\x09\x37\x95\xa4\x42\x43\x6a\x4d\x85\xaa\x2c\x71\xb9\xa3\x2b\x0b\x30\x18\xf8\x4f\xe4\x13\x45\x11\x0b\xe2\xee\x7c\xb5\x79\xe7\xe8\xcd\x44\xcf\x89\xb6\xb0\x87\x96\x2c\x5a\x4d\x27\x2f\xf4\xca\x6f\x38\x79\x2a\xc3\xdd\xf9\x3e\x0d\xbc\x0c\xbd\x87\xe9\x5d\x42\x87\xf5\x50\xc3\xb5\x16\xd7\x80\x9e\x2d\x7f\x5c\x12\x1b\xb7\x12\x29\x04\x24\xa6\x1b\x9d\xad\xa1\x43\x64\x1d\xe6\x9f\x10\xdf\xc8\xe4\x0b\x18\x1f\xdd\xe9\xf0\xd5\x2b\x74\xc9\x65\x42\x2d\x58\xb0\x92\xda\x5c\xa2\x57\x34\x67\xc8\x7a\x42\x29\xd6\xa0\x35\x5d\x42\xcf\x35\xfe\xc7\xcd\xa7\x8f\x41\x4e\x95\x06\x1f\x1c\xf3\xb8\x8e\xbf\x3e\x0b\x12\xec\x1b\xfc\xf8\xb8\xeb\x0a\x5c\xc2\x60\x69\x26\x5c\x6a\xe8\x49\x1c\x34\x98\xcf\x6c\x0d\xb2\x30\x7e\xe7\x0c\xe4\x0a\xae\x70\x69\x8f\x95\x34\x69\xc0\xcf\x2c\xfd\x5d\x16\xc2\xf4\xd0\xe8\x20\xfa\xb5\x2c\x6c\x0c\x3f\x9c\xa6\xc4\x87\xd2\x14\x29\x0c\x65\xc2\xc6\x0d\x99\x3e\x20\x72\x02\x7c\x4d\x99\x58\xb4\x38\x88\xcc\xfa\xe1\xc7\x6f\x48\x61\x93\x86\x83\xab\xfa\xe8\x6a\x1a\x50\x62\x63\x58\xf5\xa3\xb1\x84\x5d\xc7\x59\x1e\xc1\xcf\x02\x8a\xe7\x95\x8d\x38\x94\xe8\xa9\x31\x6d\x2a\xc3\x0f\x67\x73\xd2\xd8\x66\x38\xab\x26\x43\xa4\x1f\xb4\x81\xf5\xab\x0a\xf4\x15\x13\x85\x06\x44\x62\x9a\x7c\x59\x2a\x59\x88\xf4\x83\xe4\x52\x85\x48\x2d\x63\xea\x5f\xbd\x23\xde\xf8\xdd\x35\xf1\xc6\xd7\xaf\x89\x37\x0a\xae\xc6\x18\x91\x58\xaa\x14\xd4\x31\xb0\xb7\x18\x91\x5c\x32\x61\x7e\x7a\x06\xe8\x59\x0c\xb4\xe0\xbf\xca\x5b\x50\x7b\x38\xdf\x65\x59\xb6\x03\xb0\xb7\xff\x64\x32\x22\xcd\xff\xf1\x2e\x9b\x7f\xb2\xd4\xac\xc2\xb1\x93\x58\x38\x9b\x97\xf3\xb2\xbd\x92\x47\xe5\x99\x4f\xf2\x57\xbf\x89\xd8\xb2\xf1\xb9\x82\x3f\x28\x4e\xe2\xbd\xb3\x07\x1a\xbd\x71\xc2\xec\x97\xe5\x0e\xcc\xdb\xd1\x11\x51\x1e\x82\x3c\x63\xef\x2d\xf4\x4b\x05\x39\xbe\x1e\x93\xf1\xbb\xb7\x64\x32\xba\x3e\x2d\x48\x7b\xef\xcb\xe6\x6a\xfb\x86\x00\x26\xa6\xf4\x79\x40\x31\x9e\x9a\x80\x46\xab\x6f\x89\xf5\xb7\xc4\xfa\x2f\x4a\xac\x8f\xd5\xea\x59\x5d\x3c\x1e\x49\xbc\x47\x36\xf1\x76\xc9\x75\x71\x30\xb9\xae\x7b\x28\x84\x92\x64\xba\xcd\xb2\x9b\xb4\x94\x47\x54\x2d\x5d\x6d\xd9\x64\x4e\x44\x47\x55\x8d\xce\x6d\x3a\x3f\x9a\xa6\xdf\xf3\x69\x7a\x79\x89\xf5\x2c\x9d\x6f\x81\x67\xe9\xbc\x49\xde\x54\xf4\x24\x5d\x0f\x68\x9e\xf3\x07\x1f\xc8\xcc\x4e\xce\x83\x44\x8a\x84\x1a\x5f\x63\x8c\xcf\x08\x96\xc5\x5e\xf4\xe3\x0c\x55\xc1\x68\x76\x10\x84\x9e\x84\x60\x88\xa0\x8c\x7a\xe8\x92\x5a\x2b\xc8\x75\xe0\xae\xdb\x47\xba\x76\x99\x4f\x35\x65\xe0\xde\x90\x83\x14\xaa\x20\x9c\x51\x2f\xa3\xc3\x64\x05\xb7\x4a\x8a\x61\x2a\xef\x04\xc2\xf3\x36\x1c\xba\xb4\xa4\xdd\x61\xc5\x78\xaa\x40\xb4\x8d\xb1\x1e\xa2\x05\x47\x04\x09\x7a\xeb\x39\xe0\xc5\x1a\x44\x81\xb6\xc4\xd2\x7d\x62\x7d\x9d\x98\xd3\x92\x03\x5c\x62\x3c\x77\xcd\x14\x45\xa4\x4f\x49\x82\x0f\xb8\x3c\x92\x3e\x47\x35\x2d\xfb\x9a\xa5\x30\xac\xb8\x3f\xa0\x03\x9b\x78\xec\x24\x16\x8d\xfc\x43\x94\xd1\xe1\x4a\xae\x01\x11\xab\x80\x10\xfd\xea\xc6\xcd\x81\xc3\xd3\x5a\x47\x3f\x37\x6d\x90\x31\x22\x9b\x95\x82\x2c\xdc\x76\x46\xc6\xc1\xca\xac\x39\xda\xa6\x2c\xe7\xd0\x99\xec\xd3\x99\x34\x74\xe6\x07\x49\x1d\x3f\x22\xa4\xcc\x34\x47\xfc\x08\xe6\x4e\xaa\x2f\x4c\x2c\x3b\x07\x3d\xcd\x5f\x17\xad\xe6\x4f\xb4\x53\x0d\x7f\x2f\x64\x2f\x05\xfd\xc5\xc8\xbc\xe1\xf0\xf3\x7d\x2e\x25\x7f\x16\x77\x0d\x4a\xcd\x99\x71\x9f\x5f\xc9\x95\x73\xc0\x0d\x4f\xff\x94\x4b\xfd\x2c\x8e\x2a\x84\x9a\x1f\x2e\x97\xfa\x2b\xb9\x49\xb8\x14\x2d\x37\x3f\x71\x99\x7c\x49\x56\x94\x89\xe7\x19\xeb\x16\x6f\x6b\xad\xf1\x76\xee\x19\xe6\xba\xa5\x34\xe9\xa1\x34\x79\x11\xa5\xab\x1e\x4a\x57\x2f\xa2\xf4\xba\x87\xd2\xeb\x17\x51\xba\xee\xa1\x74\xfd\xb5\xd7\x31\xa6\x6a\xe8\x2a\x93\xa1\x6c\x34\x7a\xe3\x8a\x0f\x4b\x13\x97\x24\x7b\x8e\x1f\x6c\xea\x39\x3e\x5c\xa7\xc3\x2b\x8f\x43\x66\x16\x89\xbd\x0b\x27\x30\x1a\x40\x4f\x27\x4a\x72\x3e\xbc\x65\x70\x77\xd0\x83\xb6\x58\x82\xde\xc6\x54\x79\x82\xde\x2e\x0c\x33\xf6\x7e\x1c\x93\x26\xd2\xcc\x40\x03\x78\x32\x40\x66\x74\x98\xd3\x3b\x74\x44\x41\x3a\xa7\xa2\xd1\xd1\xdf\xa5\xf7\x8b\xcd\xcf\xa0\x58\x7b\x3f\x6f\x7b\xd1\xf3\x3d\xef\xd9\xea\x7d\xa3\xcd\x03\x87\x70\x53\x15\x17\xa1\xcb\xa4\x0e\xaa\x8f\x75\x2a\xd5\x43\xc2\x70\x55\xb1\x8d\x3c\x0b\x1b\x83\xbc\x15\x4b\x53\x10\xc3\x5c\x31\x61\xbc\x76\xed\xa4\x22\x2a\x02\x50\xe5\xac\x87\x19\x4a\x31\x26\x1b\x96\x86\xc8\xee\x65\x2d\xc8\x11\x2f\x5d\xc1\x7b\xde\xb3\x4e\x6f\xaa\x27\x4f\x3e\xbb\x9c\xfb\xf2\x61\x64\xbe\x10\xf4\xb6\x3d\xc2\x21\x38\x6b\x3b\x3b\x82\xd9\x07\x74\x64\xd0\x39\x94\x3c\x23\x97\xcb\x8e\x19\xee\x83\xb6\xf9\x19\xf2\x8e\x40\x6d\x4d\x30\xa6\x4a\x3b\x33\xb2\xb2\x5e\x54\xff\x9c\x8a\xea\x9d\x4a\xab\x07\x25\x39\x84\x76\x7f\xb6\x74\x9d\x25\x3b\x8b\xcb\x6f\xef\x20\xdf\xca\xb5\xff\xd1\x3b\xc8\x39\xe5\xd8\x0b\xde\x3a\xce\xeb\x49\x76\xfa\x73\xae\x03\xeb\x1a\xa2\x3e\x75\x6d\x53\xb2\xb1\x87\x0a\xdb\x3a\xc7\x8a\xd4\x35\x40\x9a\x19\xfb\x51\x9e\xd5\xcb\xac\x2b\x9c\xce\x6e\xae\x09\xdb\xf9\xae\x1b\xb2\xfe\x29\xcf\xbd\x57\x88\x9d\xf2\xd1\xf7\x8b\x9c\x0a\xe0\xa7\xe3\xe3\xfd\xe9\x68\xb7\x9a\xd4\x1e\xa9\x5b\xfb\x1d\xe1\xb8\x2d\x74\xaa\xd8\x3b\x54\x6c\xb9\x32\x9e\xe3\x67\x61\xa4\xe4\xb1\xbc\x3f\xb6\x5d\x5b\x88\x1d\x0d\xd4\x89\xe4\x9c\xe6\x1a\x86\x9c\x89\x2f\x47\x42\x16\xdb\xab\x43\x8b\x1c\xd9\xea\xfa\xa5\x55\xa8\x65\x0f\xa5\x4a\xe6\xae\x9e\x3d\x5e\x67\xb7\x70\xc3\x27\x5e\xff\x18\x9f\x77\xd6\xe7\xad\x10\x6e\xf2\x82\xef\x2c\x1d\x6a\x68\x43\x23\xec\xec\x5e\xb9\xf5\xb8\x30\xc6\x86\x62\x44\x15\xa3\x43\xb8\xcf\xa9\x48\x21\x45\x36\x75\xe3\x1a\x8e\x66\x90\x4e\x57\x2d\x97\x7f\x65\x49\xdd\xc4\xa0\x36\x0b\x38\xcc\xd4\x99\x16\xc0\xe5\xb3\xd4\x6f\xc1\xad\xe6\x0f\xee\x5c\x27\x51\xc7\x38\x6b\xee\x4c\x22\x85\x01\x61\x8e\x6c\x9c\x50\x71\x4b\x35\xea\xe4\xd4\xdb\x1f\x3d\x32\xac\x7c\x4f\x04\xae\xf5\xd0\x7d\x10\x38\xdc\x70\xed\x76\x1f\xfe\xbf\xdb\x58\xcf\xbe\x83\x95\x1a\x94\xb4\xf9\xbf\xcd\x92\xf6\xac\x14\x79\xe8\x9c\x0e\x4e\xb7\x70\xf9\x4a\x11\x66\x5b\x11\xc6\xd1\x68\x1a\x7f\xcf\xa7\xf1\xe5\x25\xce\x66\x71\x57\x84\xf1\xb3\x45\x98\xbd\xb4\x13\x58\xcb\xc8\xfa\xde\xb3\xca\xab\xd3\xa1\x22\xa7\x4b\x18\x9e\x2a\xa2\xea\xd4\xda\x42\x2d\x6c\xc5\x76\x04\x74\x75\xd5\x66\xba\xfd\xb5\xd1\x91\xba\x6a\x4d\x39\x6f\x0a\xab\x1b\x43\x0d\xd3\x86\x25\x36\x0d\xee\xb8\xf6\x67\xd5\x48\xb6\x60\xd9\x7d\xcb\x3b\xde\xa5\x38\x52\x30\xd7\xa5\xed\x1b\xcf\x0e\xf4\xba\x1e\xdc\xeb\xe1\x78\xd2\x54\xcf\xbf\xbb\x37\x3b\xaf\xd0\x74\x09\x5e\xef\x3b\x9e\x4b\x42\x10\x67\x02\xd0\x6e\xfa\xb1\xfb\x67\x1a\xcf\x69\xa6\xdc\x80\x31\x4c\x2c\xb5\xb7\xed\xa5\x7c\x77\x5e\x7b\xa1\xc5\x9c\xec\x60\xbe\xa8\x9d\x70\x86\x74\xea\x47\x38\xaf\x7e\xb5\xf3\xfa\x1e\xe6\x4e\xc9\xa7\xc6\x3d\xc1\x64\xed\xef\x9b\xd0\x44\x99\x2d\x8c\x4e\xfb\x0d\xf7\xd6\x95\x7d\x45\x11\x4b\x3b\x45\xec\xd8\xfd\xb1\x9b\x4d\x88\x69\x95\x10\xcb\x23\xb5\xac\xdc\x53\x52\x26\xa5\x01\xf5\xa4\xa7\xbf\x0f\x56\x5f\xe1\x82\xf3\x2a\x1f\x43\x04\x7d\x90\xf9\x43\x95\x9b\x4d\x46\xe3\xb7\xde\xe7\x15\x78\x4b\x39\x84\xe6\x1e\xfe\x58\x98\x95\xb4\xa5\x25\xe9\x27\x3a\x7e\x43\x84\x13\x5f\x89\xcb\x39\x9e\xfe\x37\x00\x00\xff\xff\x73\xa3\xf3\xd7\x96\x2b\x00\x00")

func jsBundleJsBytes() ([]byte, error) {
	return bindataRead(
		_jsBundleJs,
		"js/bundle.js",
	)
}

func jsBundleJs() (*asset, error) {
	bytes, err := jsBundleJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/bundle.js", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dashboard.html": dashboardHtml,
	"js/bundle.js": jsBundleJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dashboard.html": &bintree{dashboardHtml, map[string]*bintree{}},
	"js": &bintree{nil, map[string]*bintree{
		"bundle.js": &bintree{jsBundleJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

