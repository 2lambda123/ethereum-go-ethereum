// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package eth

import (
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core"
)

func (c Config) MarshalTOML() (interface{}, error) {
	type Config struct {
		Genesis                 *core.Genesis `toml:",omitempty"`
		NetworkId               int
		FastSync                bool
		LightMode               bool
		LightServ               int
		LightPeers              int
		MaxPeers                int
		SkipBcVersionCheck      bool `toml:",omitempty"`
		DatabaseCache           int
		DatabaseHandles         int    `toml:"-"`
		DocRoot                 string `toml:",omitempty"`
		PowFake                 bool   `toml:",omitempty"`
		PowTest                 bool   `toml:",omitempty"`
		PowShared               bool   `toml:",omitempty"`
		ExtraData               hexutil.Bytes
		EthashCacheDir          string `toml:",omitempty"`
		EthashCachesInMem       int
		EthashCachesOnDisk      int
		EthashDatasetDir        string `toml:",omitempty"`
		EthashDatasetsInMem     int
		EthashDatasetsOnDisk    int
		Etherbase               common.Address `toml:",omitempty"`
		GasPrice                *big.Int
		MinerThreads            int    `toml:",omitempty"`
		SolcPath                string `toml:",omitempty"`
		GpoBlocks               int
		GpoPercentile           int
		EnablePreimageRecording bool
	}
	var enc Config
	enc.Genesis = c.Genesis
	enc.NetworkId = c.NetworkId
	enc.FastSync = c.FastSync
	enc.LightMode = c.LightMode
	enc.LightServ = c.LightServ
	enc.LightPeers = c.LightPeers
	enc.MaxPeers = c.MaxPeers
	enc.SkipBcVersionCheck = c.SkipBcVersionCheck
	enc.DatabaseCache = c.DatabaseCache
	enc.DatabaseHandles = c.DatabaseHandles
	enc.DocRoot = c.DocRoot
	enc.PowFake = c.PowFake
	enc.PowTest = c.PowTest
	enc.PowShared = c.PowShared
	enc.ExtraData = c.ExtraData
	enc.EthashCacheDir = c.EthashCacheDir
	enc.EthashCachesInMem = c.EthashCachesInMem
	enc.EthashCachesOnDisk = c.EthashCachesOnDisk
	enc.EthashDatasetDir = c.EthashDatasetDir
	enc.EthashDatasetsInMem = c.EthashDatasetsInMem
	enc.EthashDatasetsOnDisk = c.EthashDatasetsOnDisk
	enc.Etherbase = c.Etherbase
	enc.GasPrice = c.GasPrice
	enc.MinerThreads = c.MinerThreads
	enc.SolcPath = c.SolcPath
	enc.GpoBlocks = c.GpoBlocks
	enc.GpoPercentile = c.GpoPercentile
	enc.EnablePreimageRecording = c.EnablePreimageRecording
	return &enc, nil
}

func (c *Config) UnmarshalTOML(unmarshal func(interface{}) error) error {
	type Config struct {
		Genesis                 *core.Genesis `toml:",omitempty"`
		NetworkId               *int
		FastSync                *bool
		LightMode               *bool
		LightServ               *int
		LightPeers              *int
		MaxPeers                *int
		SkipBcVersionCheck      *bool `toml:",omitempty"`
		DatabaseCache           *int
		DatabaseHandles         *int    `toml:"-"`
		DocRoot                 *string `toml:",omitempty"`
		PowFake                 *bool   `toml:",omitempty"`
		PowTest                 *bool   `toml:",omitempty"`
		PowShared               *bool   `toml:",omitempty"`
		ExtraData               hexutil.Bytes
		EthashCacheDir          *string `toml:",omitempty"`
		EthashCachesInMem       *int
		EthashCachesOnDisk      *int
		EthashDatasetDir        *string `toml:",omitempty"`
		EthashDatasetsInMem     *int
		EthashDatasetsOnDisk    *int
		Etherbase               *common.Address `toml:",omitempty"`
		GasPrice                *big.Int
		MinerThreads            *int    `toml:",omitempty"`
		SolcPath                *string `toml:",omitempty"`
		GpoBlocks               *int
		GpoPercentile           *int
		EnablePreimageRecording *bool
	}
	var dec Config
	if err := unmarshal(&dec); err != nil {
		return err
	}
	if dec.Genesis != nil {
		c.Genesis = dec.Genesis
	}
	if dec.NetworkId != nil {
		c.NetworkId = *dec.NetworkId
	}
	if dec.FastSync != nil {
		c.FastSync = *dec.FastSync
	}
	if dec.LightMode != nil {
		c.LightMode = *dec.LightMode
	}
	if dec.LightServ != nil {
		c.LightServ = *dec.LightServ
	}
	if dec.LightPeers != nil {
		c.LightPeers = *dec.LightPeers
	}
	if dec.MaxPeers != nil {
		c.MaxPeers = *dec.MaxPeers
	}
	if dec.SkipBcVersionCheck != nil {
		c.SkipBcVersionCheck = *dec.SkipBcVersionCheck
	}
	if dec.DatabaseCache != nil {
		c.DatabaseCache = *dec.DatabaseCache
	}
	if dec.DatabaseHandles != nil {
		c.DatabaseHandles = *dec.DatabaseHandles
	}
	if dec.DocRoot != nil {
		c.DocRoot = *dec.DocRoot
	}
	if dec.PowFake != nil {
		c.PowFake = *dec.PowFake
	}
	if dec.PowTest != nil {
		c.PowTest = *dec.PowTest
	}
	if dec.PowShared != nil {
		c.PowShared = *dec.PowShared
	}
	if dec.ExtraData != nil {
		c.ExtraData = dec.ExtraData
	}
	if dec.EthashCacheDir != nil {
		c.EthashCacheDir = *dec.EthashCacheDir
	}
	if dec.EthashCachesInMem != nil {
		c.EthashCachesInMem = *dec.EthashCachesInMem
	}
	if dec.EthashCachesOnDisk != nil {
		c.EthashCachesOnDisk = *dec.EthashCachesOnDisk
	}
	if dec.EthashDatasetDir != nil {
		c.EthashDatasetDir = *dec.EthashDatasetDir
	}
	if dec.EthashDatasetsInMem != nil {
		c.EthashDatasetsInMem = *dec.EthashDatasetsInMem
	}
	if dec.EthashDatasetsOnDisk != nil {
		c.EthashDatasetsOnDisk = *dec.EthashDatasetsOnDisk
	}
	if dec.Etherbase != nil {
		c.Etherbase = *dec.Etherbase
	}
	if dec.GasPrice != nil {
		c.GasPrice = dec.GasPrice
	}
	if dec.MinerThreads != nil {
		c.MinerThreads = *dec.MinerThreads
	}
	if dec.SolcPath != nil {
		c.SolcPath = *dec.SolcPath
	}
	if dec.GpoBlocks != nil {
		c.GpoBlocks = *dec.GpoBlocks
	}
	if dec.GpoPercentile != nil {
		c.GpoPercentile = *dec.GpoPercentile
	}
	if dec.EnablePreimageRecording != nil {
		c.EnablePreimageRecording = *dec.EnablePreimageRecording
	}
	return nil
}
